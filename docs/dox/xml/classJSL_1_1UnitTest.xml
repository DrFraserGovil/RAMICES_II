<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classJSL_1_1UnitTest" kind="class" language="C++" prot="public">
    <compoundname>JSL::UnitTest</compoundname>
    <derivedcompoundref refid="classJSL__Testing_1_1ArgumentTest" prot="public" virt="non-virtual">JSL_Testing::ArgumentTest</derivedcompoundref>
    <derivedcompoundref refid="classJSL__Testing_1_1IOTest" prot="public" virt="non-virtual">JSL_Testing::IOTest</derivedcompoundref>
    <derivedcompoundref refid="classJSL__Testing_1_1MatrixTest" prot="public" virt="non-virtual">JSL_Testing::MatrixTest</derivedcompoundref>
    <derivedcompoundref refid="classJSL__Testing_1_1MetaTest" prot="public" virt="non-virtual">JSL_Testing::MetaTest</derivedcompoundref>
    <derivedcompoundref refid="classJSL__Testing_1_1StringTest" prot="public" virt="non-virtual">JSL_Testing::StringTest</derivedcompoundref>
    <derivedcompoundref refid="classJSL__Testing_1_1VectorTest" prot="public" virt="non-virtual">JSL_Testing::VectorTest</derivedcompoundref>
    <includes refid="UnitTest_8h" local="no">UnitTest.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classJSL_1_1UnitTest_1a53c19424147e72fa6392470627f15049" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string JSL::UnitTest::Name</definition>
        <argsstring></argsstring>
        <name>Name</name>
        <briefdescription>
<para>The name by which the <ref refid="classJSL_1_1UnitTest" kindref="compound">UnitTest</ref> refers to itself. This should be fairly descriptive, to help locating the failing unit test (don&apos;t give them all the same name!) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/RAMICES_II/libs/JSL/Testing/UnitTest.h" line="15" column="13" bodyfile="/home/jack/Documents/Work/RAMICES_II/libs/JSL/Testing/UnitTest.h" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classJSL_1_1UnitTest_1afac1f363a8406fad39316ee772a837a9" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool JSL::UnitTest::Passed</definition>
        <argsstring></argsstring>
        <name>Passed</name>
        <briefdescription>
<para>If true, the <ref refid="classJSL_1_1UnitTest" kindref="compound">UnitTest</ref> is considered successful, and no errors are thrown. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/RAMICES_II/libs/JSL/Testing/UnitTest.h" line="18" column="6" bodyfile="/home/jack/Documents/Work/RAMICES_II/libs/JSL/Testing/UnitTest.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classJSL_1_1UnitTest_1a54dc4908d757c7f523be12a4275e595c" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool JSL::UnitTest::NonCriticalFailure</definition>
        <argsstring></argsstring>
        <name>NonCriticalFailure</name>
        <briefdescription>
<para>If true, the <ref refid="classJSL_1_1UnitTest" kindref="compound">UnitTest</ref> will only throw warnings, rather than exist, when an error is encountered. Default is false. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/RAMICES_II/libs/JSL/Testing/UnitTest.h" line="21" column="6" bodyfile="/home/jack/Documents/Work/RAMICES_II/libs/JSL/Testing/UnitTest.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classJSL_1_1UnitTest_1a3dcc71e7e8f72f0f07b8fc552b777ad8" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; JSL::UnitTest::MessageBuffer</definition>
        <argsstring></argsstring>
        <name>MessageBuffer</name>
        <briefdescription>
<para>A message buffer which is output when <ref refid="classJSL_1_1UnitTest_1a39e1076dd985334ce21606ae2a383f70" kindref="member">Results()</ref> is called, giving updates on the progress of the test. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/RAMICES_II/libs/JSL/Testing/UnitTest.h" line="24" column="13" bodyfile="/home/jack/Documents/Work/RAMICES_II/libs/JSL/Testing/UnitTest.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classJSL_1_1UnitTest_1aa3bc8d5c99696d5bc6e63b8da358a0ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>JSL::UnitTest::UnitTest</definition>
        <argsstring>()</argsstring>
        <name>UnitTest</name>
        <briefdescription>
<para>Constructor class. Initialises the system to a failing state. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/RAMICES_II/libs/JSL/Testing/UnitTest.h" line="28" column="1" bodyfile="/home/jack/Documents/Work/RAMICES_II/libs/JSL/Testing/UnitTest.h" bodystart="28" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1UnitTest_1aa8369ab1ce2a537bff2ea7e1c8818490" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void JSL::UnitTest::Run_Test</definition>
        <argsstring>()</argsstring>
        <name>Run_Test</name>
        <reimplementedby refid="classJSL__Testing_1_1MetaTest_1a176352dcd54f9ec7df8f1548882e6820">Run_Test</reimplementedby>
        <reimplementedby refid="classJSL__Testing_1_1StringTest_1ada0409cd10e3f09788994a9115331ff7">Run_Test</reimplementedby>
        <reimplementedby refid="classJSL__Testing_1_1IOTest_1a85daecacc71354b5dc0dee36840b8704">Run_Test</reimplementedby>
        <reimplementedby refid="classJSL__Testing_1_1ArgumentTest_1a1c4c626d57e448da86866ef414308e97">Run_Test</reimplementedby>
        <reimplementedby refid="classJSL__Testing_1_1VectorTest_1ad79bb4654e6f7b59d31d7239ee0c2b82">Run_Test</reimplementedby>
        <reimplementedby refid="classJSL__Testing_1_1MatrixTest_1a8fe2a671faf414dbd13c407ab52b75fb">Run_Test</reimplementedby>
        <briefdescription>
<para>All children which want to take advantage of the <ref refid="classJSL_1_1UnitTest_1aabec19b081be8a428f12e4b5e3dc2a9c" kindref="member">BufferedTest()</ref> command should have the bulk of their testing within this command. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/RAMICES_II/libs/JSL/Testing/UnitTest.h" line="38" column="14" bodyfile="/home/jack/Documents/Work/RAMICES_II/libs/JSL/Testing/UnitTest.h" bodystart="38" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1UnitTest_1aabec19b081be8a428f12e4b5e3dc2a9c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void JSL::UnitTest::BufferedTest</definition>
        <argsstring>()</argsstring>
        <name>BufferedTest</name>
        <briefdescription>
<para>Calls the overridden function <ref refid="classJSL_1_1UnitTest_1aa8369ab1ce2a537bff2ea7e1c8818490" kindref="member">Run_Test()</ref> within a try-catch loop. Provides an extra level of safety and diagnostics for any unhandled exceptions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/RAMICES_II/libs/JSL/Testing/UnitTest.h" line="44" column="6" bodyfile="/home/jack/Documents/Work/RAMICES_II/libs/JSL/Testing/UnitTest.h" bodystart="44" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1UnitTest_1a39e1076dd985334ce21606ae2a383f70" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool JSL::UnitTest::Results</definition>
        <argsstring>()</argsstring>
        <name>Results</name>
        <briefdescription>
<para>Prints the results of the testing to the terminal and prints the contents of MessageBuffer line-by-line. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value of Passed (true if test succeeded) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/RAMICES_II/libs/JSL/Testing/UnitTest.h" line="58" column="6" bodyfile="/home/jack/Documents/Work/RAMICES_II/libs/JSL/Testing/UnitTest.h" bodystart="58" bodyend="87"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classJSL_1_1UnitTest_1a3629d1bca071da7a2af6b7de29be1430" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void JSL::UnitTest::basicConditionCheck</definition>
        <argsstring>(bool condition, std::string successmessage, std::string failuremessage)</argsstring>
        <name>basicConditionCheck</name>
        <param>
          <type>bool</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>successmessage</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>failuremessage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A structure to help basic logic flow within unit tests. If the condition is false, the unit test considers itself failed, and updates the messages and Passed status accordingly <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>condition</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, the sub-test is successful </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>successmessage</parametername>
</parameternamelist>
<parameterdescription>
<para>If condition == true, this is the message appended to the MessageBuffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>failuremessage</parametername>
</parameternamelist>
<parameterdescription>
<para>If condition == false, this message is used instead. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/RAMICES_II/libs/JSL/Testing/UnitTest.h" line="95" column="6" bodyfile="/home/jack/Documents/Work/RAMICES_II/libs/JSL/Testing/UnitTest.h" bodystart="95" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1UnitTest_1a53ede0c6b420eaf64faf752c0518340e" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void JSL::UnitTest::basicConditionCheck</definition>
        <argsstring>(bool condition, std::string messageFramework)</argsstring>
        <name>basicConditionCheck</name>
        <param>
          <type>bool</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>messageFramework</declname>
        </param>
        <briefdescription>
<para>An override of the other function, preventing dual-typing of basic output messages. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/RAMICES_II/libs/JSL/Testing/UnitTest.h" line="109" column="6" bodyfile="/home/jack/Documents/Work/RAMICES_II/libs/JSL/Testing/UnitTest.h" bodystart="109" bodyend="114"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A parent class for various unit testing frameworks. Provides a consistent API for interacting with the unit tests. The class is essentially meaningless on its own, but when coupled to a decently written subclass (i.e. <ref refid="classJSL__Testing_1_1StringTest" kindref="compound">JSL_Testing::StringTest</ref>), it becomes very useful. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="5">
        <label>JSL_Testing::MetaTest</label>
        <link refid="classJSL__Testing_1_1MetaTest"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>JSL_Testing::IOTest</label>
        <link refid="classJSL__Testing_1_1IOTest"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>JSL_Testing::StringTest</label>
        <link refid="classJSL__Testing_1_1StringTest"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>JSL_Testing::MatrixTest</label>
        <link refid="classJSL__Testing_1_1MatrixTest"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>JSL::UnitTest</label>
        <link refid="classJSL_1_1UnitTest"/>
      </node>
      <node id="2">
        <label>JSL_Testing::ArgumentTest</label>
        <link refid="classJSL__Testing_1_1ArgumentTest"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>JSL_Testing::VectorTest</label>
        <link refid="classJSL__Testing_1_1VectorTest"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/home/jack/Documents/Work/RAMICES_II/libs/JSL/Testing/UnitTest.h" line="12" column="1" bodyfile="/home/jack/Documents/Work/RAMICES_II/libs/JSL/Testing/UnitTest.h" bodystart="11" bodyend="115"/>
    <listofallmembers>
      <member refid="classJSL_1_1UnitTest_1a3629d1bca071da7a2af6b7de29be1430" prot="protected" virt="non-virtual"><scope>JSL::UnitTest</scope><name>basicConditionCheck</name></member>
      <member refid="classJSL_1_1UnitTest_1a53ede0c6b420eaf64faf752c0518340e" prot="protected" virt="non-virtual"><scope>JSL::UnitTest</scope><name>basicConditionCheck</name></member>
      <member refid="classJSL_1_1UnitTest_1aabec19b081be8a428f12e4b5e3dc2a9c" prot="public" virt="non-virtual"><scope>JSL::UnitTest</scope><name>BufferedTest</name></member>
      <member refid="classJSL_1_1UnitTest_1a3dcc71e7e8f72f0f07b8fc552b777ad8" prot="public" virt="non-virtual"><scope>JSL::UnitTest</scope><name>MessageBuffer</name></member>
      <member refid="classJSL_1_1UnitTest_1a53c19424147e72fa6392470627f15049" prot="public" virt="non-virtual"><scope>JSL::UnitTest</scope><name>Name</name></member>
      <member refid="classJSL_1_1UnitTest_1a54dc4908d757c7f523be12a4275e595c" prot="public" virt="non-virtual"><scope>JSL::UnitTest</scope><name>NonCriticalFailure</name></member>
      <member refid="classJSL_1_1UnitTest_1afac1f363a8406fad39316ee772a837a9" prot="public" virt="non-virtual"><scope>JSL::UnitTest</scope><name>Passed</name></member>
      <member refid="classJSL_1_1UnitTest_1a39e1076dd985334ce21606ae2a383f70" prot="public" virt="non-virtual"><scope>JSL::UnitTest</scope><name>Results</name></member>
      <member refid="classJSL_1_1UnitTest_1aa8369ab1ce2a537bff2ea7e1c8818490" prot="public" virt="virtual"><scope>JSL::UnitTest</scope><name>Run_Test</name></member>
      <member refid="classJSL_1_1UnitTest_1aa3bc8d5c99696d5bc6e63b8da358a0ed" prot="public" virt="non-virtual"><scope>JSL::UnitTest</scope><name>UnitTest</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
